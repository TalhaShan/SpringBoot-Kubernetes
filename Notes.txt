Copy files all and kind as well starup K8s and kind folder
check all in lens service as well 
18080 port of api

1. starter test contains all mockiton junit
2. testcontainer postgresql added
3. @Container to use in test for using postegresql in test with ovveride database properites
@TestPropertySource(properties = {
        "spring.datasource.url=jdbc:tc:postgresql:14-alpine:///demo"
})

WITH THIS DOCKER IMAGE OF POSTGRESQL WE ARE RUNNING THE SAME ENV AS WE WILL HAVE ON PROD
4.     @ParameterizedTest
       @CsvSource({
               "1,15,2,1,true,false,true,false",
               "2,15,2,2,false,true,false,true"
       })

for parameterized test replace @Test

5. We can use docker or docker layer file to create image
6. More preferable is to Maven plugin to use that is auto configure in pom to generate docker file
7. mvn spring-boot:build-image -Dspring-boot.build-image.imageName=dock2727/bookmarker-api
Used to generate image with name or you can specify name in Pom.xml to by whcih name image should be create
8. mvn spring-boot:build-image //then this will only be needed
9. We can also use jib google plugin to generate image. it will also push it to docker hub
10. mvn -verify run build jar
11. Only pass pageable in query method will be sufficient spring will handle it page and size
12. We can have interface base projection and class based projection(DTO) //response or request
13. The void method will return 200 Ok but to modify we can use   @ResponseStatus(HttpStatus.CREATED) on method controller
14. tALK CONTAINER TO CONTAINER SPECIFY CONTAINER NAME INSTEAD OF HOST
//bookmarker-db:5432/appdb
15.  "15432:5432"  //HOST:CONTAINER
16. docker compose up -f file name  for any other file inseted od docker-compose.yml
17. docker-compose up -d --build  recreate the container
18. We can have separate docker file one for db one for application
docker-compose -f docker-compose.yml -f docker-compose-app.yml up -d
19. In next js there will be server side rendering and client side rendering two url one for client and one for internal host api calls
20. In docker we can run many containers as we want from single image refer docker1.png
21. Docker Volume: When we restart the container our data is lost so if our aplication is stateless like rest api
calls or something it get served
22. But what if we have some file manipulation and data need to be stored then we used docker it store our data
22. Or we can mapped data to local file system on our container
refer image: docker2.png
23. Where we can push or store our image refer docker3.png
24. To run multiple docker container we have docker compose we can simply define
depends on: like for db or something refer image docker4.png
25. all run on same container so they can discover each other.
26. Kubernetes is a container orchestration platform it maintains high availability and scalability
kubectl,kind,lens
27. Kubernetes
kubectl get pods  //to see available pods
You can create pods using commands or by usign yaml file 

kubectl run bookmarker-api --image=dock2727/bookmarker-api --port=8080 //be defualt it wnat latest tag if tag is different please specify
kubectl delete pod bookmarker-api
kubectl logs bookmarker-api -f
//to get into container
kubectl exec -it bookmarker-api -- /bin/sh
//then you can hit any endpoint to ccheck
kubectl describe pods springkube  //to know pod name
28. TO generate pod yaml you can runn 
kubectl run springkube --image=dock2727/springkube:v3 --port=8080 --dry-run=client -o yaml 
this will not create and run pod 
also to save yaml as file you can run -> kubectl run springkube --image=dock2727/springkube:v3 --port=8080 --dry-run=client -o yaml > pod.yaml
29. Use this command to cread pod from yaml -> kubectl apply -f pod.yaml
30, To delete kubectl delete -f pod.yaml
31. In general we don't work with pods we use replica sets of the pods
32. an In general also we dont't wok with replica set we work with deployments under the hood is replica sets
33. Deployment help in version control also we can move frowarad to new version or revert back to previous version
34. To create deployments kubectl create deployment springkube --image=dock2727/springkube:v3
35. kubectl get all
36. To create yaml for deployment ->  kubectl create deployment springkube --image=dock2727/springkube:v3 --dry-run=client -o yaml >deployment.yaml
37. template section in deployment yaml is pod
38. Selector is important in yaml file relation between pod and deployment is Selector , match label
kubectl apply -f deployment.yaml //to make deployment via file
39. Increase replica of pods in yaml or by command -> kubectl scale deployment springkube --replicas=3
40. kubectl rollout history deployment springkube
41. kubectl apply -f .  //all file will run
42. To store vairbale values like db host password we have Config maps
-> kubectl create  configmap db-config --from-literal=db_host=postgres --from-literal=db_name=appdb
or you can create key value file and apply
43. To delete config map -> kubectl delete cm db-config  or -> kubectl delete configmap db-config
44. To Create yaml -> kubectl create  configmap db-config --from-literal=db_host=postgres --from-literal=db_name=appdb  --dry-run=client -o yaml > 1-config.yaml
45.  and in pod yam you can give reference to map config and then key -- value from then keymapconfig ,....
46. as we know there can be multiple profile like dev local etc , now sprign boot support mulitsupport doc in same dock you can
have multiple profile and their value and seprator
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=validate
#logging.level.org.hibernate.type.descriptor.sql=TRACE
spring.flyway.locations=classpath:/db/migration/{vendor}
#---
spring.config.activate.on-profile=k8s
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:appdb}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}

47.  We can create secret for our vaierable like db hsot and password
kubectl create secret generic  springkube-secret --from-literal=postgres_username=postgres   --dry-run=client -o yaml
advanagtge over config map is that as you see username is encoded automatically now we can put it in config map file 
apiVersion: v1
data:
  postgres_username: cG9zdGdyZXM=
kind: Secret
metadata:
  creationTimestamp: null
  name: springkube-secret

48. You can check config and secret on lens 
49. Read docker volue vs persisten Volume  
50. AS We see in docker some data we don't want to loose so we create docker Volume, same in kubernetes we have persitence volume, claim and mount in on our container
51. Perssitence volume can be store on AWS STOre block, azure file,azure disk
52. Read peristentceVolume and persistanceVolume claim
52. Check peristence volume in lens 

53. How to expose contaienr as a service
service forware request to pod on given port // Service  can select on the basis of name or version number to whoch pod to forward request
54. Read about type of Service , cluster service will be all accebsile with in the container
Like for postgres we can have cluster service so only contaienr can access it
Like for API we can have nord service so it is accsible from out, we also have nordPort for it in config
55. Ingress - used to route request to various services
We can have path prefix mapping or host base
path based :  /product /promotion
host: product.com , promotion.com
56. We can use onlyy inggress to expose services we can now ignore nord
In productuon type is not ClusterIp or norde port we use type :"stateful application"

